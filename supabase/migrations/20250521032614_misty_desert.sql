/*
  # Update billing and payment structure
  
  1. New Fields for Clients
    - `tipo_mensalidade` (text) - Type of payment (primeira/recorrente)
    - `valor_mensal` (decimal) - Monthly payment amount
    - `foi_gerada_por` (text) - Generated by (admin/automacao)
    - `data_base_cliente` (date) - Reference date for recurring payments

  2. Changes
    - Add new columns
    - Add constraints and indexes
    - Update existing data
*/

-- Add new columns to clients table
ALTER TABLE clients
ADD COLUMN IF NOT EXISTS tipo_mensalidade text DEFAULT 'primeira' CHECK (tipo_mensalidade IN ('primeira', 'recorrente')),
ADD COLUMN IF NOT EXISTS valor_mensal decimal(10,2),
ADD COLUMN IF NOT EXISTS foi_gerada_por text DEFAULT 'admin' CHECK (foi_gerada_por IN ('admin', 'automacao')),
ADD COLUMN IF NOT EXISTS data_base_cliente date;

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS idx_clients_billing ON clients (
  tipo_mensalidade,
  data_base_cliente,
  valor_mensal
);

-- Update existing clients
UPDATE clients 
SET 
  valor_mensal = monthly_fee,
  data_base_cliente = COALESCE(proxima_data_pagamento, CURRENT_DATE)
WHERE valor_mensal IS NULL;

-- Add trigger to update data_base_cliente when payment date changes
CREATE OR REPLACE FUNCTION update_client_base_date()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.proxima_data_pagamento IS DISTINCT FROM OLD.proxima_data_pagamento THEN
    NEW.data_base_cliente = NEW.proxima_data_pagamento;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_update_client_base_date
  BEFORE UPDATE ON clients
  FOR EACH ROW
  EXECUTE FUNCTION update_client_base_date();